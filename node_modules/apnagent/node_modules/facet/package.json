{
  "name": "facet",
  "version": "0.4.0",
  "description": "Configuration mixin for constructors.",
  "author": {
    "name": "Jake Luer",
    "email": "jake@qualiancy.com",
    "url": "http://qualiancy.com"
  },
  "license": "MIT",
  "keywords": [
    "configure",
    "settings"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:qualiancy/facet.git"
  },
  "engines": {
    "node": "*"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {},
  "devDependencies": {
    "chai": "*",
    "chai-spies": "*",
    "component": "*",
    "mocha": "*",
    "mocha-phantomjs": "*"
  },
  "readme": "# facet [![Build Status](https://secure.travis-ci.org/qualiancy/facet.png?branch=master)](https://travis-ci.org/qualiancy/facet)\n\n> Configuration mixin for constructors.\n\n## Installation\n\n### Node.js\n\n`facet` is available on [npm](http://npmjs.org).\n\n    $ npm install facet\n\n### Component\n\n`facet` is available as a [component](https://github.com/component/component).\n\n    $ component install qualiancy/facet\n\n## Usage\n\n### facet (object[, options])\n\n* **@param** _{Object}_ Constructor or Object\n* **@param** _{Mixed}_ Options \n* **@return** _{Object}_  Constructor or Object\n\nThis mixin provides a way to store arbitray key/value\npairs on a constructor or object. Furthermore, it provides\na number of helper methods to retrieve the stored values.\n\nBegin by applying the mixin to a constructor or object.\n\n```js\n// on a constructor\nfacet(MyConstructor.prototype);\n\n// on an object\nvar obj = {};\nfacet(obj);\n```\n\n**Storage:** Facet will default to creating and using the `.settings`\nobject on the constructor or object to store the\nkey/value pairs. If you would like to use something else\nyou may specify a different storage key.\n\n```js\nfacet(MyConstructor.prototype, '_options');\n```\n\n**Handle:** Facet can also invoke a handle anytime a setting is\nwritten. This is preferred method of responding to\nwrites as opposed to overwriting the `.set` method.\n\nThe `this` context in the handle will be the object\ninstance.\n\n```js\nfacet(MyEventEmitter.prototype, function (key, value) {\n  // emit changes on self\n  this.emit('settings', key, value);\n});\n\nvar ee = new MyEventEmitter();\n\nee.on('settings', function (key, value) {\n  console.log('%s was set to: ', key, value);\n});\n\nee.set('hello', 'universe');\n// \"hello was set to: universe\"\n```\n\n**All Settings:** If you are changing more than one of the\noptions than you can use an object as the second argument.\n\n- **@param** _{String}_ `store`\n- **@param** _{Function}_ `handle`\n\n```js\nfacet(MyEventEmitter.prototype, {\n    store: '_options'\n  , handle: function (key, value) {\n      this.emit('options', key, value);\n    }\n});\n```\n\n\n## API\n\n\n\n#### .set (key[, value])\n\n* **@param** _{String|Object}_ key or object\n* **@param** _{Mixed}_ value \n* **@return** _{this}_  for chaining\n\nModify a key/value pair of settings, or use\nan object to modify many settings at once.\n\n```js\nobj\n.set('hello', 'universe')\n.set({\n    hello: 'universe'\n  , say: 'loudly'\n});\n```\n\n\n#### .get (key)\n\n* **@param** _{String}_ key \n\nReturn the value of a stored setting.\n\n```js\nobj.get('hello').should.equal('universe');\n```\n\n\n#### .enable (key)\n\n* **@param** _{String}_ key \n* **@return** _{this}_  for chaining\n\nMark a setting key as \"enabled\" (true).\n\n```js\nobj.enable('loudly');\n```\n\n\n#### .disable (key)\n\n* **@param** _{String}_ key \n* **@return** _{this}_  for chaining\n\nMark a setting key as \"disabled\" (false).\n\n```js\nobj.disable('whisper');\n```\n\n\n#### .enabled (key)\n\n* **@param** _{String}_ key \n\nConfirm that a given key is enabled (=== true).\nSettings that do not exist will return `false`.\n\n```js\nobj.enabled('loudly').should.be.true;\nobj.enabled('whisper').should.be.false;\nobj.enabled('scream').should.be.false;\n```\n\n\n#### .disabled (key)\n\n* **@param** _{String}_ key \n\nConfirm that a setting key is disabled (=== false).\nSettings that do not exists will return `true`.\n\n```js\nobj.disabled('loudly').should.be.false;\nobj.disabled('whisper').should.be.true;\nobj.disabled('scream').should.be.true;\n```\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Jake Luer <jake@qualiancy.com> (http://qualiancy.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "facet@0.4.0",
  "dist": {
    "shasum": "a88231a7c0d6c503bd37274332147cd4e65dd3ce"
  },
  "_from": "facet@0.4.x",
  "_resolved": "https://registry.npmjs.org/facet/-/facet-0.4.0.tgz"
}
